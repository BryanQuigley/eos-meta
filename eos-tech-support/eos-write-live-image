#!/bin/bash -e
set -o pipefail

# Writes an Endless OS image to a device (e.g., USB drive or SD card) so that it
# can be used both as a live system, and to install itself. The image is
# extracted to an exFAT partition, and is booted using a GRUB and
# initramfs which know how to loopback-mount the image.
#
# NOTE: the partition table will not be in physical order so Windows can mount
# the image partition. Additional images copied to the image partition will be
# detected by the installer, but will not be bootable.

EOS_WRITE_IMAGE=$(dirname $0)/eos-write-image
if [ ! -f $EOS_WRITE_IMAGE ]; then
    EOS_WRITE_IMAGE='eos-write-image'
fi
EOS_DOWNLOAD_IMAGE=$(dirname $0)/eos-download-image
if [ ! -f $EOS_DOWNLOAD_IMAGE ]; then
    EOS_DOWNLOAD_IMAGE='eos-download-image'
fi

ARGS=$(getopt -o o:x:lnmwfh -l "os-image:,windows-tool:,latest,ntfs,mbr,writable,force,help" -n "$0" -- "$@")
eval set -- "$ARGS"

usage() {
    cat <<EOF
Usage:
   $0 [options] DEVICE

Arguments:
    DEVICE                 Device path (e.g. '/dev/sdb')

Options:
   -o,--os-image PATH      Path to Endless OS image
   -x,--windows-tool PATH  Path to Endless OS installer tool for Windows
   -l,--latest             Fetch latest OS image and/or Windows tool
   -w,--writable           Allow image to be modified when run (which
                           prevents installing it later)
   -f,--force              don't ask to proceed before writing
   -h,--help               Show this message

Developer options (you probably don't want to use these):
   -n,--ntfs               Format the image partition as NTFS, not exFAT
   -m,--mbr                Format DEVICE as MBR, not GPT
EOF
}

function check_exists() {
    if [ ! -f "$1" ]; then
        echo "$2 $1 does not exist or is not a file" >&2
        exit 1
    fi
}

NTFS=
MBR=
WRITABLE=
FORCE=
while true; do
    case "$1" in
        -o|--os-image)
            shift
            OS_IMAGE="$1"
            shift
            ;;
        -x|--windows-tool)
            shift
            WINDOWS_TOOL="$1"
            shift
            ;;
        -l|--latest)
            shift
            FETCH_LATEST=true
            ;;
        -n|--ntfs)
            shift
            NTFS=true
            ;;
        -m|--mbr)
            shift
            MBR=true
            ;;
        -w|--writable)
            shift
            WRITABLE=true
            ;;
        -f|--force)
            shift
            FORCE=true
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
    esac
done

if [ $# -lt 1 ] ; then
    echo "Missing DEVICE" >&2
    usage >&2
    exit 1
fi

DEVICE="$1"

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges" >&2
    exit 1
fi

# Check for required tools
declare -A dependencies
dependencies=(
    [dd]='coreutils'
    [unzip]='unzip'
    [xzcat]='xz-utils'
    [zcat]='gzip'
)

if [ "$NTFS" ]; then
    MKFS_IMAGES="mkfs.ntfs"
    MKFS_ARGS='--quick -L'
    dependencies[$MKFS_IMAGES]='ntfs-3g'
else
    MKFS_IMAGES="mkfs.exfat"
    MKFS_ARGS=-n
    dependencies[$MKFS_IMAGES]='exfat-utils'
fi

for command in "${!dependencies[@]}"; do
    if ! which "$command" >/dev/null 2>&1; then
        echo "$command is not installed... aborting!" >&2
        echo "Try 'sudo apt-get install ${dependencies[$command]}'" >&2
        exit 1
    fi
done

if [ ! -b "$DEVICE" ]; then
    echo "$DEVICE does not exist or is not a block device... aborting!" >&2
    exit 1
fi

if grep -qs "$DEVICE" /proc/mounts; then
    # Protect against overwriting the device currently in use
    echo "$DEVICE is currently in use -- please unmount and try again" >&2
    exit 1
fi

if [ ! "$FORCE" ]; then
    read -p "Are you sure you want to overwrite all data on $DEVICE? [y/N] "
    response="${REPLY,,}" # to lower
    if [[ ! "$response" =~ ^(yes|y)$ ]]; then
        exit 1
    fi
fi

if [ -z "$FETCH_LATEST" ]; then
    if [ -z "$WINDOWS_TOOL" ] || [ -z "$OS_IMAGE" ]; then
        echo "--os-image and --windows-tool are required if --latest is not specified" >&2
        usage >&2
        exit 2
    fi
fi

if [ ! -z "$FETCH_LATEST" ]; then
    if [ -z "$OS_IMAGE" ]; then
        OS_IMAGE=$($EOS_DOWNLOAD_IMAGE --product eos)
    fi
    if [ -z "$WINDOWS_TOOL" ]; then
        WINDOWS_TOOL=$($EOS_DOWNLOAD_IMAGE --windows-tool)
    fi
fi

check_exists "$OS_IMAGE" "image"

EXTRACTED_SIGNATURE="${OS_IMAGE%.?z}.asc"
check_exists "$EXTRACTED_SIGNATURE" "uncompressed image signature"

BOOT_ZIP="${OS_IMAGE%.img.?z}.boot.zip"
check_exists "$BOOT_ZIP" "bootloader bundle"
check_exists "$BOOT_ZIP.asc" "bootloader bundle signature"

check_exists "$WINDOWS_TOOL" "Windows tool"

echo
echo "Partitioning $DEVICE..."

find_by_type() {
    echo "$1" | grep -i "type=$2" | cut -d' ' -f1
}

if [ "$MBR" ]; then
    sfdisk --label dos "$DEVICE" <<MBR_PARTITIONS
1 : type=7
MBR_PARTITIONS
    udevadm settle
    partprobe "$DEVICE"
    PARTMAP=$(sfdisk --dump "$DEVICE")
    DEVICE_IMAGES=$(find_by_type "$PARTMAP" "7")
else
    # https://en.wikipedia.org/wiki/GUID_Partition_Table#Partition_type_GUIDs
    PARTITION_SYSTEM_GUID="c12a7328-f81f-11d2-ba4b-00a0c93ec93b"
    PARTITION_BIOS_BOOT_GUID="21686148-6449-6E6F-744E-656564454649"
    PARTITION_BASIC_DATA_GUID="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7"

    # We want the data partition, "eoslive", to occupy all the space on the disk
    # after the UEFI and BIOS boot partitions. But, we also want it to be numbered
    # first: apparently Windows will only mount the partition numbered first,
    # regardless of where it is on the disk.
    #
    # It is important that the offset of the BIOS boot partition matches that
    # used in the Endless OS image builder, since it is embedded in the GRUB
    # image.
    sfdisk --label gpt "$DEVICE" <<EFI_PARTITIONS
2 : start=2048, size=62MiB, type=$PARTITION_SYSTEM_GUID
3 : size=1MiB, type=$PARTITION_BIOS_BOOT_GUID
1 : name=eoslive, type=$PARTITION_BASIC_DATA_GUID
EFI_PARTITIONS
    udevadm settle
    partprobe "$DEVICE"
    PARTMAP=$(sfdisk --dump "$DEVICE")
    DEVICE_IMAGES=$(find_by_type "$PARTMAP" "$PARTITION_BASIC_DATA_GUID")
    DEVICE_EFI=$(find_by_type "$PARTMAP" "$PARTITION_SYSTEM_GUID")
    DEVICE_BIOS=$(find_by_type "$PARTMAP" "$PARTITION_BIOS_BOOT_GUID")
fi

echo
echo "Creating partitions"
if [ ! "$MBR" ]; then
    mkfs.vfat -n efi "${DEVICE_EFI}"
fi
$MKFS_IMAGES $MKFS_ARGS eoslive "${DEVICE_IMAGES}"

# Give udisks a chance to notice the new partitions
partprobe
udevadm settle

udisks_mount() {
    udisksctl mount -b "$1" --no-user-interaction >&2
    MOUNT_POINT=$(udisksctl info -b "$1" | awk '/MountPoints:/ { print $2 }')
    if [ ! -d "$MOUNT_POINT" ]; then
        echo "Failed to mount $1" >&2
        exit 1
    fi
    echo $MOUNT_POINT
}

udisks_unmount() {
    udisksctl unmount -b "$1" --no-user-interaction >&2
}

if [ ! "$MBR" ]; then
    MOUNT_EFI=$(udisks_mount "$DEVICE_EFI")
    unzip -q -d "${MOUNT_EFI}" "${BOOT_ZIP}" "EFI/*"
    udisks_unmount "$DEVICE_EFI"
fi

MOUNT_IMAGES=$(udisks_mount "$DEVICE_IMAGES")
MOUNT_IMAGES_ENDLESS="${MOUNT_IMAGES}/endless"
mkdir "$MOUNT_IMAGES_ENDLESS"
unzip -q -d "${MOUNT_IMAGES_ENDLESS}" "${BOOT_ZIP}" "grub/*"

if [ ! "$WRITABLE" ]; then
    cp "${BOOT_ZIP}" "${BOOT_ZIP}.asc" "${EXTRACTED_SIGNATURE}" \
        "$MOUNT_IMAGES_ENDLESS/"
    echo "$(basename "${OS_IMAGE%.?z}")" > "${MOUNT_IMAGES_ENDLESS}/live"
    cp "$WINDOWS_TOOL" "$MOUNT_IMAGES/"
fi

"$EOS_WRITE_IMAGE" --removable "$OS_IMAGE" "-" > "${MOUNT_IMAGES_ENDLESS}/endless.img"
udisks_unmount "$DEVICE_IMAGES"

if [ "$MBR" ]; then
    # Bootstrap code, which will jump to sector 1
    unzip -q -p "${BOOT_ZIP}" "ntfs/boot.img" | dd of="${DEVICE}" bs=446 count=1
    udevadm settle  # udev recreates device files after any write to the device
    # The rest of GRUB goes after the MBR and before the first partition.
    unzip -q -p "${BOOT_ZIP}" "ntfs/core.img" | dd of="${DEVICE}" bs=512 seek=1
else
    # Bootstrap code, built to jump to the offset of BIOS boot partition
    unzip -q -p "${BOOT_ZIP}" "live/boot.img" | dd of="${DEVICE}" bs=446 count=1
    udevadm settle  # udev recreates device files after any write to the device
    # The rest of GRUB goes into a dedicated BIOS-boot partition
    unzip -q -p "${BOOT_ZIP}" "live/core.img" | dd of="${DEVICE_BIOS}" bs=512
fi

udevadm settle
sync
