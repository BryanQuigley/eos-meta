#!/bin/bash -e

# Writes a raw installer image (possibly zipped)
# to a device (e.g., USB drive or SD card)
# using dd, with status monitoring via pv
#
# Afterwards, adds an exfat partition that fills
# the rest of the available space to the beginning
# of the partition table and creates the filesystem
# on it. NOTE: the partition table will not be
# in physical order so Windows can mount the image
# partition.

EOS_WRITE_IMAGE=$(dirname $0)/eos-write-image
if [ ! -f $EOS_WRITE_IMAGE ]; then
    EOS_WRITE_IMAGE='eos-write-image'
fi

ARGS=$(getopt -o i:,o:,h -l "installer:,os-image:,help" -n "$0" -- "$@")
eval set -- "$ARGS"

usage() {
    cat <<EOF
Usage:
   $0 [options] DEVICE
Arguments:
    DEVICE	Device path (e.g. '/dev/sdb' or '/dev/mmcblk0')
Options:
   -i,--installer	Path to Endless OS installer image (required)
   -o,--os-image	Path to Endless OS image to add to installer (required)
   -h,--help	show this message
EOF
}

function check_exists() {
    if [ ! -f "$1" ]; then
        echo "$1 does not exist or is not a file device"
        exit 1
    fi
}
while true; do
    case "$1" in
        -i|--installer)
            shift
            INSTALLER_IMAGE="$1"
            check_exists "$INSTALLER_IMAGE"
            shift
            ;;
        -o|--os-image)
            shift
            OS_IMAGE="$1"
            check_exists "$OS_IMAGE"
            check_exists "$OS_IMAGE.asc"
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
    esac
done

if [ $# -lt 1 ] ; then
    echo "Missing DEVICE"
    usage
    exit 1
fi

DEVICE="$1"

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges"
    exit 1
fi

# Check for required tools
command -v mkfs.exfat >/dev/null || {
    echo "mkfs.exfat is not installed... aborting!"
    echo "Try 'sudo apt-get install exfat-utils'"
    exit 1
}

command -v dd >/dev/null || {
    echo "dd is not installed... aborting!"
    echo "Try 'sudo apt-get install coreutils'"
    exit 1
}

command -v gzip >/dev/null || {
    echo "gzip is not installed... aborting!"
    echo "Try 'sudo apt-get install gzip'"
    exit 1
}

command -v pv >/dev/null || {
    echo "pv is not installed... aborting!"
    echo "Try 'sudo apt-get install pv'"
    exit 1
}

if test \! -b $DEVICE; then
    echo "$DEVICE does not exist or is not a block device... aborting!"
    exit 1
fi

if grep -qs $DEVICE /proc/mounts; then
    # Protect against overwriting the device currently in use
    echo "$DEVICE is currently in use -- please unmount and try again"
    exit 1
fi

if [ ! -f "$INSTALLER_IMAGE" -o ! -f "$OS_IMAGE" ]; then
    echo "--installer and --image are required"
    usage
    exit 2
fi

# Write the image
echo
echo "Writing $INSTALLER_IMAGE to $DEVICE..."
$EOS_WRITE_IMAGE -f "$INSTALLER_IMAGE" "$DEVICE"

# Get the current partition table
TABLE=$(sfdisk -d $DEVICE)

# Split the partition table to header and partitions
HEADER=$(echo "$TABLE" | grep -v '^/')
PARTS=$(echo "$TABLE" | grep '^/' | sed -e 's/.*: //')

# Grab the last sector and add one to get the start of our exfat partition
START=$(echo "$HEADER" | grep 'last-lba' | sed -e 's/^last-lba: //')
START=$(($START + 1))

# Remove the last-lba line so that we fill the disk
HEADER=$(echo "$HEADER" | sed -e '/^last-lba:/d')

# Prepend our partition
PARTS="start=$START, name=eosimages, type=EBD0A0A2-B9E5-4433-87C0-68B6B72699C7
$PARTS"

# Reconstruct the table
TABLE="$HEADER
$PARTS"

# Replace the partition table with our modified version
echo "$TABLE" | sfdisk --force --no-reread $DEVICE

# At this point udev should have seen that sfdisk closed the block device
# which was opened for writing, so it will be reprobing.
# Add udevadm settle here to avoid races.
udevadm settle
partprobe

# Grab the eosimages partition and create exfat fs on it
PART=$(sfdisk -d $DEVICE | grep 'eosimages' | cut -f1 -d' ')
mkfs.exfat -n eosimages $PART

# Give udisks a chance to notice the new partition
partprobe
udevadm settle

# Try to mount the exfat partition
udisksctl mount -b ${DEVICE}1 --no-user-interaction || exit 1
# Grab the mount point
MOUNTPOINT=$(grep ${DEVICE}1 /proc/mounts | cut -f2 -d' ')
if test -n "$MOUNTPOINT" -a -d "$MOUNTPOINT"
then
  # Write image and its signature
  cp "$OS_IMAGE.asc" "$MOUNTPOINT"/
  pv "$OS_IMAGE" > "$MOUNTPOINT"/"$OS_IMAGE"
fi
udisksctl unmount -b ${DEVICE}1 --no-user-interaction
sync
