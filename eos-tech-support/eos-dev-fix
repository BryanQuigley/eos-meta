#!/bin/bash -e

if ! mount -o remount,rw /usr; then
  echo "Failed to remount /usr readwrite - exiting"
  exit 1
fi

if [ -d /ostree/deploy/master ]; then
  echo "Detected master OSTree deploy"
  OSTREE_DEPLOY=/ostree/deploy/master
elif [ -d /ostree/deploy/dev ]; then
  echo "Detected dev OSTree deploy"
  OSTREE_DEPLOY=/ostree/deploy/dev
elif [ -d /ostree/deploy/eos ]; then
  echo "Detected eos OSTree deploy"
  OSTREE_DEPLOY=/ostree/deploy/eos
else
  echo "Failed to find OSTree deploy - exiting"
  exit 1
fi

# Check that we're booted into the "current" deployment. Dig out the
# booted deployment directory from the mountinfo. The 4th element in
# mountinfo is the "root" within a mounted filesystem, 5th is where it's
# mounted.
OSTREE_DEPLOY_BOOTED=$(awk '{if ($5 == "/") print $4}' /proc/self/mountinfo)
if [ -z "${OSTREE_DEPLOY_BOOTED}" ]; then
  echo "Not booted in an ostree system - exiting" >&2
  exit 1
fi
OSTREE_DEPLOY_CURRENT=$(ostree admin --print-current-dir)
if [ $(readlink -f ${OSTREE_DEPLOY_BOOTED}) != \
     $(readlink -f ${OSTREE_DEPLOY_CURRENT}) ] ; then
  echo -e "\nA new system upgrade has been already deployed," \
    "please reboot first and then run ${0} again afterwards" >&2
  exit 1
fi

# Disable upgrade timer
systemctl stop eos-autoupdater.timer
systemctl disable eos-autoupdater.timer

# Unsure if these are necessary after stopping the timer, but better to be
# sure.
systemctl stop eos-autoupdater.service

echo -e "\nAutomatic upgrades have been stopped," \
  "your system can no longer be upgraded using ostree beyond this point!"

echo "Copying files from $OSTREE_DEPLOY_CURRENT"

if [ ! -d /var/lib/dpkg ]; then
  cp -a $OSTREE_DEPLOY_CURRENT/var/lib/dpkg /var/lib/
  cp -a $OSTREE_DEPLOY_CURRENT/var/lib/xml-core /var/lib/
  cp -a $OSTREE_DEPLOY_CURRENT/var/lib/sgml-base /var/lib/
  cp -a $OSTREE_DEPLOY_CURRENT/var/cache/debconf /var/cache/
  apt-get update
else
  echo "dpkg database already found - exiting"
fi
