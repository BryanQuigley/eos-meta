#!/bin/bash -e

# Prepares an Endless image that can be booted from external USB
# (even if the device already has Endless on the internal drive)
# The image must be unzipped before running this,
# and the image is modified in place

if [ $# -lt 1 ] ; then
   echo "Missing command line arguments"
   echo "Usage:"
   echo "   $0 image"
   echo "Where:"
   echo "   image = raw image file (.img)"
   exit
fi

IMAGE="$1"

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges"
    exit 1
fi

# Unmount the partitions and cleanup the loopback device
cleanup() {
    set +e

    if [ -n "$ROOT_MOUNT" ]; then
        umount $ROOT_MOUNT
        rmdir $ROOT_MOUNT
    fi
    if [ -n "$LOOP_DEV" ]; then
        kpartx -d $LOOP_DEV
        losetup -d $LOOP_DEV
    fi
}
trap cleanup EXIT

# Mount the root partition using a loopback device
LOOP_DEV=$(losetup --show -f $IMAGE)
kpartx -a $LOOP_DEV
ROOT_MOUNT=/mnt/image_root
mkdir -p $ROOT_MOUNT

# Find the root device on the loopback via the "ostree" label
ROOT_DEV=$(blkid -t LABEL=ostree /dev/mapper/$(basename $LOOP_DEV)p* -o device)

# Change the UUID for the root partition
# (because the image builder generates all images
# with the same UUID)
tune2fs -U random $ROOT_DEV
ROOT_UUID=$(blkid -s UUID -o value $ROOT_DEV)

mount $ROOT_DEV $ROOT_MOUNT
DEPLOY=$(ostree admin --sysroot=$ROOT_MOUNT --print-current-dir)

# Change to boot based on UUID rather than label
sed -i "/^options/s/ root=[^$ ]*/ root=UUID=$ROOT_UUID/" "$ROOT_MOUNT"/boot/loader/entries/ostree-*.conf

# Reinstall grub into the boot sector
grub-install --boot-directory=$ROOT_MOUNT/boot \
             --modules="ext2 part_msdos part_gpt" \
             --directory="$DEPLOY"/usr/lib/grub/i386-pc \
             $IMAGE
