#!/usr/bin/env python3
# vim: fileencoding=utf-8 sts=4 sw=4 et
import argparse
import codecs
import distutils.version
import gzip
import json
import os
import shlex
import subprocess
import sys
import urllib.request

INTERNAL_BASE_URL = "http://images.endlessm-sf.com"
PUBLIC_BASE_URL = "https://d1anzknqnc1kmb.cloudfront.net"
KEYRING_FILENAME = "eos-image-keyring.gpg"
KEYRING_URL = PUBLIC_BASE_URL + "/" + KEYRING_FILENAME
KEYRING_SYSTEM_PATH = "/usr/share/keyrings/eos-image-keyring.gpg"


def log(*args):
    sys.stderr.write('\n')
    print(*args, file=sys.stderr)
    sys.stderr.flush()


def check_call(*args):
    log('$ ' + ' '.join(map(shlex.quote, args)))
    subprocess.check_call(args, stdout=sys.stderr)


def ensure_keyring():
    if os.path.isfile(KEYRING_SYSTEM_PATH):
        return KEYRING_SYSTEM_PATH

    keyring = os.path.abspath(KEYRING_FILENAME)
    if not os.path.isfile(keyring):
        log("Fetching Endless keyring")
        check_call("wget", "-O", keyring, KEYRING_URL)

    return keyring


def download_and_verify(base, meta, what='image'):
    image_url = '{}/{}'.format(base, meta['file'])
    signature_url = '{}/{}'.format(base, meta['signature'])

    image = os.path.basename(image_url)

    log("Downloading compressed", what, "from", image_url)
    check_call("wget", "--continue", image_url)

    with open(image + '.size', 'w') as f:
        f.write(str(meta['extracted_size']))

    log("Downloading compressed", what, "from", signature_url)
    check_call("wget", "--continue", signature_url)

    if meta.get('extracted_signature'):
        url = '{}/{}'.format(base, meta['extracted_signature'])
        log("Downloading uncompressed", what, "signature from", url)
        check_call("wget", "--continue", url)

    keyring = ensure_keyring()

    log("Verifying")
    check_call("gpgv", "--keyring", keyring,
               os.path.basename(signature_url),
               image)

    log("Download okay.")
    return image


def main():
    p = argparse.ArgumentParser(
        description='Fetches and verifies an image (installer or regular OS)')
    p.add_argument('-v', '--version',
                   help='Image version (default: newest)')
    p.add_argument('-p', '--personality',
                   help='Image personality (default: base)',
                   default='base')
    g = p.add_mutually_exclusive_group()
    g.add_argument('-r', '--product',
                   help='Product (eg: eosinstaller; default: eos)',
                   default='eos')
    g.add_argument('-w', '--windows-tool',
                   action='store_true',
                   help='Fetch the Windows USB creator/installer, '
                        'not an Endless OS image')
    p.add_argument('-i', '--internal',
                   action='store_true',
                   help='Fetch images from the Endless internal network')

    args = p.parse_args()
    base = INTERNAL_BASE_URL if args.internal else PUBLIC_BASE_URL

    if args.windows_tool:
        fetch_windows_tool(base)
    else:
        fetch_image(args, base)


def fetch_windows_tool(base):
    filename = 'endless-installer.exe'
    url = '{}/endless-installer/{}'.format(base, filename)
    log("Fetching Windows Installer")
    check_call("wget", "--timestamping", url)
    print(filename)


def fetch_image(args, base):
    manifest_url = '{base}/releases-{product}.json.gz'.format(
        base=base, product=args.product)
    req = urllib.request.Request(manifest_url)
    with urllib.request.urlopen(req) as conn:
        with gzip.GzipFile(mode='r', fileobj=conn) as manifest_fp:
            manifest = json.load(codecs.getreader('utf8')(manifest_fp))

    images = list(manifest['images'].values())
    images.sort(key=lambda i: distutils.version.StrictVersion(i['version']))
    if args.version is not None:
        for selected in images:
            if selected['version'] == args.version:
                break
        else:
            log("Image version", repr(args.version), "not found")
            log("Known versions:", *[i['version'] for i in images])
            sys.exit(1)
    else:
        selected = images[-1]

    personalities = selected['personality_images']
    try:
        personality = personalities[args.personality]
    except KeyError:
        log("Personality", repr(args.personality), "not found")
        log("Known personalities:", *sorted(personalities.keys()))
        sys.exit(1)

    meta = personality['full']
    if 'boot' in meta and meta['boot']['file']:
        download_and_verify(base, meta['boot'], what='bootloader')

    print(download_and_verify(base, meta))


if __name__ == '__main__':
    main()
