#!/bin/bash -e

# Fetches and verifies an image (installer or regular OS)

INTERNAL_BASE_URL="http://images.endlessm-sf.com"
MANIFEST_BASE_URL="https://d1anzknqnc1kmb.cloudfront.net"
BASE_URL="$MANIFEST_BASE_URL"
KEYRING_FILENAME="eos-image-keyring.gpg"
KEYRING_URL="$MANIFEST_BASE_URL/$KEYRING_FILENAME"
KEYRING_SYSTEM_PATH="/usr/share/keyrings/$KEYRING_FILENAME"
PRODUCT="eos"

ARGS=$(getopt -o v:p:r:ih -l "version:,personality:,product:,internal,help" -n "$0" -- "$@")
eval set -- "$ARGS"

usage() {
    cat >&2 <<EOF
Usage:
   $0 [options]
Options:
   -v,--version		Specify version for the Endless OS image (default: newest)
   -p,--personality	Specify personality for the Endless OS image (default: base)
   -r,--product		Specify product to download (eg eosinstaller; default: eos)
   -i,--internal	Fetch images from the Endless network, not Cloudfront
   -h,--help		show this message
EOF
}

while true; do
    case "$1" in
        -v|--version)
            shift
            VERSION=$1
            shift
            ;;
        -p|--personality)
            shift
            PERSONALITY=$1
            shift
            ;;
        -r|--product)
            shift
            PRODUCT=$1
            shift
            ;;
        -i|--internal)
            shift
            BASE_URL="$INTERNAL_BASE_URL"
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
    esac
done

log() {
    echo >&2
    echo "$@" >&2
}

download_and_verify() {
  log "Downloading $1 from $2"
  # FIXME: wget is used here since curl seems to append a 416 error document
  #        to an already completely downloaded file...
  wget --continue $2 || return 1

  log "Downloading signature for $1 from $3"
  curl -L -O $3 || return 1

  ensure_keyring

  log "Verifying..."
  gpgv --keyring $KEYRING $(basename $3) $(basename $2) || return 1

  log "Download ok."
  return 0
}

ensure_keyring() {
  if [ -f "$SYSTEM_KEYRING" ]
  then
    KEYRING="$SYSTEM_KEYRING"
  else
    KEYRING="$(readlink -f ./$KEYRING_FILENAME)"
    if [ ! -f "$KEYRING" ]
    then
      log "Fetching Endless keyring"
      curl -o"$KEYRING" "$KEYRING_URL"
    fi
  fi
}

log "Fetching manifest..."
JSON=$(curl $MANIFEST_BASE_URL/releases-$PRODUCT.json.gz | gzip -d)

# If the user specified a version, select that but otherwise we go with latest
if test -z "$VERSION"
then
  SELECTED=$(echo $JSON | jq '.images[] | values' | jq -s 'max_by(.version)')
else
  SELECTED=$(echo $JSON | jq '.images[] | values' | jq -s ".[] | select(.version | contains(\"$1\"))")
fi

if test -z "$PERSONALITY"
then
  PERSONALITY="base"
fi

# Only full images are supported for now
OS_IMAGE_URL=$(echo $SELECTED | jq -r ".personality_images[\"$PERSONALITY\"] | .full | .file")
OS_SIGNATURE_URL=$(echo $SELECTED | jq -r ".personality_images[\"$PERSONALITY\"] | .full | .signature")

if test "null" = "$OS_IMAGE_URL" -o "null" = $OS_SIGNATURE_URL
then
  log "Problem fetching the image manifest. Please try again."
  exit 1
fi

# Download & verify
download_and_verify "image" $BASE_URL/$OS_IMAGE_URL $BASE_URL/$OS_SIGNATURE_URL >&2

echo $(basename $OS_IMAGE_URL)
