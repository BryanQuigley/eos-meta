#!/bin/bash -e

# Resizes a device (such as an external USB)
# that contains a bootable Endless image
# so that the root partition fills the available space
#
# This is necessary, for instance, with an external USB drive
# that has been prepared and flashed using eos-usb-image
# and eos-write-image, since the automatic resize on first boot
# does not work properly on the resulting USB device

if [ $# -lt 1 ] ; then
    echo "Missing command line arguments"
    echo "Usage:"
    echo "   $0 device"
    echo "Where:"
    echo "   device = device name (e.g., '/dev/sdb' or '/dev/mmcblk0')"
    exit
fi

DEVICE="$1"

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges"
    exit 1
fi

if grep -qs $DEVICE /proc/mounts; then
    # Protect against overwriting the device currently in use
    echo "$DEVICE is currently in use -- please unmount and try again"
    exit 1
fi

# Find the root partition on the device via the "ostree" label
ROOT_PART=$(blkid -t LABEL=ostree $DEVICE* -o device)
PARTNO="${ROOT_PART: -1}"

# Check for our magic "this is Endless" marker
MARKER=$(sfdisk --force --part-attrs $DEVICE $PARTNO)
if [ "$MARKER" != "GUID:55" ]; then
    echo "Device does not contain the Endless marker on partition $PARTNO"
    exit 1
fi

# Get the current partition table
PARTS=$(sfdisk -d $DEVICE)

# Remove the last-lba line so that we fill the disk
PARTS=$(echo "$PARTS" | sed -e '/^last-lba:/d')

# Remove the size argument so that sfdisk rewrites using maximum size
PARTS=$(echo "$PARTS" | sed -e '/GUID:55/s/, size=[^,]*//')

# Remove the marker to prevent the script from running again
PARTS=$(echo "$PARTS" | sed -e 's/, attrs="GUID:55"//')

echo "$PARTS"

# Replace the partition table with our modified version
echo "$PARTS" | sfdisk --force --no-reread $DEVICE

# At this point udev should have seen that sfdisk closed the block device
# which was opened for writing, so it will be reprobing.
# Add udevadm settle here to avoid races.
udevadm settle

# Check the file system (required precursor to resizing)
e2fsck -f $ROOT_PART

# At this point udev should have seen that e2fsck closed the block device
# which was opened for writing, so it will be reprobing.
# Add udevadm settle here to avoid races.
udevadm settle

# Resize the file system (should happen on boot, but let's ensure it now
# in case the user wants to add an image file to the device before booting)
resize2fs $ROOT_PART
