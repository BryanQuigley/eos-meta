#!/bin/bash

# Writes a raw image (possibly zipped)
# to a device (e.g., USB drive or SD card)
# using dd, with status monitoring via pv

ARGS=$(getopt -o fh -l "force,help" -n "$0" -- "$@")
eval set -- "$ARGS"

usage() {
    cat <<EOF
Usage:
   $0 image device [block_size]
Where:
   image = raw or zipped image file (.img or .img.gz)
   device = device name (e.g., '/dev/sdb' or '/dev/mmcblk0')
   block_size = block size in bytes (default = '1M')
Options:
   -f,--force	don't ask to proceed with writing
   -h,--help	show this message
EOF
}

FORCE=false
DD_IN_OPTS=(iflag=nonblock)
DD_OUT_OPTS=(oflag=nonblock conv=sparse,fsync)
while true; do
    case "$1" in
        -f|--force)
            FORCE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
    esac
done

command -v dd >/dev/null || {
    echo "dd is not installed... aborting!"
    echo "Try 'sudo apt-get install coreutils'"
    exit 1
}

command -v pv >/dev/null || {
    echo "pv is not installed... aborting!"
    echo "Try 'sudo apt-get install pv'"
    exit 1
}

if [ $# -lt 2 ] ; then
    echo "Missing command line arguments" >&2
    usage >&2
    exit 1
fi

USERID=$(id -u)
IMAGE="$1"
DEVICE="$2"

BLOCK_SIZE=1M
if [ $# -ge 3 ] ; then
    BLOCK_SIZE="$3"
fi
DD_IN_OPTS+=(bs="$BLOCK_SIZE")
DD_OUT_OPTS+=(bs="$BLOCK_SIZE")

if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges"
    exit 1
fi

if [ ! -f "$IMAGE" ]; then
    echo "$IMAGE not found"
    exit 1
fi

if [ ! -b $DEVICE ]; then
    echo "$DEVICE not found"
    exit 1
fi

if grep -qs $DEVICE /proc/mounts; then
    # Protect against overwriting the device currently in use
    echo "$DEVICE is currently in use -- please unmount and try again"
    exit 1
fi

if ! $FORCE; then
    read -p "Are you sure you want to overwrite all data on $DEVICE? [y/N] "
    response=${REPLY,,} # to lower
    if [[ ! $response =~ ^(yes|y)$ ]]; then
        exit 1
    fi
fi

if file --mime-type "$IMAGE" | grep -q gzip$; then
    # Image is gzipped
    # The following would calculate the original size
    # of the unzipped file if less than 4G: 
    # IMAGE_SIZE=$(zcat -l "$IMAGE" | awk 'NR==2 { print $2 }')
    # But this doesn't help for large images,
    # so we just show relative progress
    zcat "$IMAGE" | pv | dd of="$DEVICE" "${DD_OUT_OPTS[@]}"
else
    # Image is not gzipped
    # We can show progress as percentage of total image size
    IMAGE_SIZE=$(ls -l "$IMAGE" | awk '{ print $5 }')
    dd if="$IMAGE" "${DD_IN_OPTS[@]}" | pv -s ${IMAGE_SIZE} \
        | dd of="$DEVICE" "${DD_OUT_OPTS[@]}"
fi
