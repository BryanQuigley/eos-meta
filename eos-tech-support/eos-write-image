#!/bin/bash -e
set -o pipefail

# Writes a raw image (possibly zipped)
# to a device (e.g., USB drive or SD card)
# using dd, with status monitoring via pv

ARGS=$(getopt -o fh -l "force,sparse,debug,removable,help" -n "$0" -- "$@")
eval set -- "$ARGS"

usage() {
    cat <<EOF
Usage:
   $0 [options] IMAGE DEVICE [BLOCK_SIZE]
Arguments:
   IMAGE        raw or zipped image file (.img or .img.gz)
   DEVICE       device name (e.g., '/dev/sdb' or '/dev/mmcblk0')
                or '-' to write uncompressed image to stdout
   BLOCK_SIZE   block size in bytes (default = '1M')
Options:
   -f,--force   don't ask to proceed with writing
   --sparse     use dd sparse conversion option
   --debug      turn on debugging messages
   --removable  device is removable (remove fallback.efi)
   -h,--help    show this message
EOF
}

FORCE=
REMOVABLE=
DD_IN_OPTS=(iflag=nonblock)
DD_OUT_OPTS=(oflag=nonblock conv=fsync)
while true; do
    case "$1" in
        -f|--force)
            FORCE=true
            shift
            ;;
        --sparse)
            DD_OUT_OPTS+=(conv=sparse)
            shift
            ;;
        --debug)
            set -x
            shift
            ;;
        --removable)
            REMOVABLE=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
    esac
done

declare -A dependencies
dependencies=(
    [dd]='coreutils'
    [pv]='pv'
    [zcat]='gzip'
)
for command in "${!dependencies[@]}"; do
    if ! which "$command" >/dev/null 2>&1; then
        echo "$command is not installed... aborting!" >&2
        echo "Try 'sudo apt-get install ${dependencies[$command]}'" >&2
        exit 1
    fi
done

if [ $# -lt 2 ] ; then
    if [ $# -eq 0 ]; then
        echo "Error: missing IMAGE and DEVICE arguments" >&2
    else
        echo "Error: missing DEVICE arguments" >&2
    fi
    echo >&2
    usage >&2
    exit 1
fi

USERID=$(id -u)
IMAGE="$1"
DEVICE="$2"

BLOCK_SIZE=1M
if [ $# -ge 3 ] ; then
    BLOCK_SIZE="$3"
fi
DD_IN_OPTS+=(bs="$BLOCK_SIZE")
DD_OUT_OPTS+=(bs="$BLOCK_SIZE")

if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges" >&2
    exit 1
fi

if [ ! -f "$IMAGE" ]; then
    echo "$IMAGE not found" >&2
    exit 1
fi

cat_image() {
    if file --mime-type "$IMAGE" | grep -q gzip$; then
        # Image is gzipped
        # The following would calculate the original size
        # of the unzipped file if less than 4G:
        # IMAGE_SIZE=$(zcat -l "$IMAGE" | awk 'NR==2 { print $2 }')
        # But this doesn't help for large images,
        # so we just show relative progress unless .size is present
        if [ -f "$IMAGE.size" ]; then
            IMAGE_SIZE=$(cat $IMAGE.size)
            PV_ARGS="-s $IMAGE_SIZE"
        fi
        zcat "$IMAGE" | pv $PV_ARGS
    else
        # Image is not gzipped
        # We can show progress as percentage of total image size
        IMAGE_SIZE=$(ls -l "$IMAGE" | awk '{ print $5 }')
        dd if="$IMAGE" "${DD_IN_OPTS[@]}" | pv -s ${IMAGE_SIZE}
    fi
}

if [ "$DEVICE" == "-" ]; then
    cat_image
else
    if [ ! -b "$DEVICE" ]; then
        echo "$DEVICE not found or is not a block device" >&2
        exit 1
    fi

    if grep -qs "$DEVICE" /proc/mounts; then
        # Protect against overwriting the device currently in use
        echo "$DEVICE is currently in use -- please unmount and try again" >&2
        exit 1
    fi

    if [ ! "$FORCE" ]; then
        read -p "Are you sure you want to overwrite all data on $DEVICE? [y/N] "
        response="${REPLY,,}" # to lower
        if [[ ! "$response" =~ ^(yes|y)$ ]]; then
            exit 1
        fi
    fi

    # Try to format / discard all the sectors on the device
    blkdiscard "$DEVICE" &>/dev/null || true
    cat_image | dd of="$DEVICE" "${DD_OUT_OPTS[@]}"

    # If removable device, delete $ESP/EFI/BOOT/fallback.efi
    if [ "$REMOVABLE" ]; then

        # Probe new partitions
        partprobe
        udevadm settle

        # Assume ESP is the first partition
        case "$DEVICE" in
            /dev/mmcblk?)
                ESP=${DEVICE}p1
                ;;
            /dev/sd?)
                ESP=${DEVICE}1
                ;;
        esac

        # Try to mount ESP
        udisksctl mount -b "$ESP" --no-user-interaction || exit 1

        # Grab the mountpoint
        ESP_MP=$(grep "$ESP" /proc/mounts | cut -f2 -d' ')

        if test -n "$ESP_MP" -a -d "$ESP_MP"
        then
            ESP_BOOT="${ESP_MP}/EFI/BOOT"
            ESP_ENDLESS="${ESP_MP}/EFI/endless"
            FALLBACK="${ESP_BOOT}/fallback.efi"
            MOKMANAGER="${ESP_ENDLESS}/MokManager.efi"
            GRUB="${ESP_ENDLESS}/grubx64.efi"

            if [ ! -f "$FALLBACK" ]; then
                echo "$FALLBACK not found" >&2
            else
                rm -v "$FALLBACK"
                mv -v "$MOKMANAGER" "$ESP_BOOT"
                mv -v "$GRUB" "$ESP_BOOT"
                rm -frv "$ESP_ENDLESS"
            fi
        fi

        # Unmount ESP
        udisksctl unmount -b "$ESP" --no-user-interaction
    fi
fi
