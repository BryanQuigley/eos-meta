#!/usr/bin/env gjs

const Gio = imports.gi.Gio;
const GLib = imports.gi.GLib;
const Lang = imports.lang;

function collectGraphicsRenderer() {
    let iface =
        '<node>' +
        '<interface name="org.gnome.SessionManager">' +
        '<property name="Renderer" type="s" access="read"/>' +
        '</interface>' +
        '</node>';

    let sessionProxyProto = Gio.DBusProxy.makeProxyWrapper(iface);
    let sessionProxy = new sessionProxyProto(Gio.DBus.session,
                                             'org.gnome.SessionManager',
                                             '/org/gnome/SessionManager');

    let output = 'Graphics renderer: ';
    if (sessionProxy)
        output += sessionProxy.Renderer;
    else
        output += 'unknown';
    output += '\n';

    return output;
}

function collectBoardInfo() {
    let table = { 'System vendor': '/sys/devices/virtual/dmi/id/sys_vendor',
		  'Product name': '/sys/devices/virtual/dmi/id/product_name',
		  'Product serial': '/sys/devices/virtual/dmi/id/product_uuid',
		  'Product version': '/sys/devices/virtual/dmi/id/product_version',
		  'Board vendor': '/sys/devices/virtual/dmi/id/board_vendor',
		  'Board name': '/sys/devices/virtual/dmi/id/board_name',
		  'Board version': '/sys/devices/virtual/dmi/id/board_version',
		  'BIOS vendor': '/sys/devices/virtual/dmi/id/bios_vendor',
		  'BIOS version': '/sys/devices/virtual/dmi/id/bios_version',
		  'BIOS date': '/sys/devices/virtual/dmi/id/bios_date' };

    let output = '';
    let names = Object.keys(table);
    names.forEach(function(name) {
	let file = table[name];
	output += name;
	output += ': ';

	try {
	    let [res, contents] = GLib.file_get_contents(file);
	    output += contents;
	} catch (e) {
	    if (name == 'Product name') {
	        try {
		    file = '/proc/device-tree/compatible';
		    let [res, contents] = GLib.file_get_contents(file);
		    output += contents + '\n';
		} catch (e) {
		    output += 'not available\n';
		}
	    } else {
	        output += 'not available\n';
	    }
	}
    });

    return output;
}

function collectPrintersInfo() {
    let output = '';
    let ppds_dir_path = '/etc/cups/ppd';

    output += 'CUPS status:\n------------\n';
    try {
        let argv = ['/usr/bin/lpstat', '-t'];
        let envp = ['LANG=C'];
        let [res, stdout, stderr, exitStatus] = GLib.spawn_sync(null, argv, envp,
                                                                GLib.SpawnFlags.DEFAULT,
                                                                null, null);
        output += stdout;
    } catch (e) {
        output += 'error ocurred querying CUPS status: ' + e + '\n';
    }

    let ppds_dir = Gio.file_new_for_path(ppds_dir_path);
    if (!ppds_dir.query_exists(null)) {
        output += ppds_dir_path + ' not found';
        return output;
    }

    try {
        let installed_ppds = ppds_dir.enumerate_children('standard::name',
                                                         Gio.FileQueryInfoFlags.NONE,
                                                         null)
        let ppd_info = null;
        while ((ppd_info = installed_ppds.next_file(null))) {
            let ppd_path = GLib.build_filenamev([ppds_dir_path, ppd_info.get_name()]);
            output += '\nContents for ' + ppd_path + ':\n-------------';
            for (let i = 0; i < ppd_path.length; i++)
                output += '-';
            output += '-\n';

            try {
                let [res, contents] = GLib.file_get_contents(ppd_path);
                output += contents;
            } catch (e) {
                output += 'not available\n';
            }
        }
    } catch (e) {
        output += 'Unable to find installed PPD files: ' + e + '\n';
    }

    return output;
}

function collectTemperatureInfo() {
    try {
	let [res, tempInput] = GLib.file_get_contents('/sys/class/thermal/thermal_zone0/temp');
	let temperature = parseInt(tempInput);
	let temperatureStr = (temperature / 1000).toString() + 'Â°C';
	return ((temperature > 0) ? ('+') : ('-')) + temperatureStr + '\n';
    } catch (e) {
	return 'No temperature information available\n';
    }
}

function collectChromiumPluginsInfo() {
    let output = 'Version: ';

    let flashPath = Gio.file_new_for_path('/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/libpepflashplayer.so');
    if (!flashPath.query_exists(null)) {
	output += 'not installed\n';
	return output;
    }

    try {
	let [res, version] = GLib.file_get_contents('/var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/VERSION.txt');
	output += version;
	output += '\n';
    } catch(e) {
	output += 'not available\n';
    }

    return output;
}

function collectEosDevInfo() {
    let output = '';
    let dpkgDir = Gio.File.new_for_path('/var/lib/dpkg');
    if (dpkgDir.query_exists(null)) {
	output += '*************************************************************\n';
	output += '*                        WARNING                            *\n';
	output += '* eos-dev-fix or eos-convert-system was run on the system!! *\n';
	output += '*************************************************************\n';
	output += '\n';
    }

    return output;
}

function trySpawn(command) {
    try {
	let [res, stdout, stderr, exitStatus] = GLib.spawn_command_line_sync(command);
	return stdout;
    } catch (e) {
	return '';
    }
}

function tryReadFile(filename, fallbackMessage) {
    try {
	let [res, contents] = GLib.file_get_contents(filename);
	return contents;
    } catch (e) {
	return (fallbackMessage) ? fallbackMessage : '';
    }
}

function dumpDiagnostics(filename) {
    let fullDump = '';

    fullDump += collectEosDevInfo();

    fullDump += '=====================\n'
    fullDump += '= EndlessOS version =\n'
    fullDump += '=====================\n'
    fullDump += '\n';
    fullDump += trySpawn('uname -a');
    fullDump += '\n';
    fullDump += tryReadFile('/etc/os-release');
    fullDump += '\n';

    fullDump += '=========================\n'
    fullDump += '= EndlessOS personality =\n'
    fullDump += '=========================\n'
    fullDump += '\n';
    fullDump += tryReadFile('/etc/EndlessOS/personality.conf', 'No personality file\n');
    fullDump += '\n';

    fullDump += '==========\n'
    fullDump += '= Uptime =\n'
    fullDump += '==========\n'
    fullDump += '\n';
    fullDump += trySpawn('uptime');
    fullDump += '\n';

    fullDump += '=================\n'
    fullDump += '= OSTree status =\n'
    fullDump += '=================\n'
    fullDump += '\n';
    fullDump += trySpawn('ostree admin status');
    fullDump += '\n';

    fullDump += '=====================\n'
    fullDump += '= Board information =\n'
    fullDump += '=====================\n'
    fullDump += '\n';
    fullDump += collectBoardInfo();
    fullDump += '\n';

    fullDump += '======================\n'
    fullDump += '= Memory information =\n'
    fullDump += '======================\n'
    fullDump += '\n';
    fullDump += trySpawn('free -mh');
    fullDump += '\n';

    fullDump += '====================\n'
    fullDump += '= Disk information =\n'
    fullDump += '====================\n'
    fullDump += '\n';
    fullDump += trySpawn('mount');
    fullDump += '\n';
    fullDump += trySpawn('df -h');
    fullDump += '\n';
    fullDump += trySpawn('udisksctl dump');
    fullDump += '\n';

    fullDump += '=======================\n'
    fullDump += '= Network information =\n'
    fullDump += '=======================\n'
    fullDump += '\n';
    fullDump += trySpawn('ifconfig -a');
    fullDump += '\n';

    fullDump += '=======================\n'
    fullDump += '= Display information =\n'
    fullDump += '=======================\n'
    fullDump += '\n';
    fullDump += trySpawn('xrandr -q --verbose');
    fullDump += '\n';
    fullDump += collectGraphicsRenderer();
    fullDump += '\n';

    fullDump += '=====================\n'
    fullDump += '= Audio information =\n'
    fullDump += '=====================\n'
    fullDump += '\n';
    fullDump += trySpawn('pactl list');
    fullDump += '\n';

    fullDump += '======================\n'
    fullDump += '= Device information =\n'
    fullDump += '======================\n'
    fullDump += '\n';
    fullDump += 'PCI\n\n';
    fullDump += trySpawn('lspci -knn');
    fullDump += '\n';
    fullDump += 'USB\n\n';
    fullDump += trySpawn('lsusb');
    fullDump += '\n';

    fullDump += '========================\n'
    fullDump += '= Printers information =\n'
    fullDump += '========================\n'
    fullDump += '\n';
    fullDump += collectPrintersInfo();
    fullDump += '\n';

    fullDump += '===========================\n'
    fullDump += '= Temperature information =\n'
    fullDump += '===========================\n'
    fullDump += '\n';
    fullDump += collectTemperatureInfo();
    fullDump += '\n';

    fullDump += '================================\n'
    fullDump += '= Chromium plugins information =\n'
    fullDump += '================================\n'
    fullDump += '\n';
    fullDump += collectChromiumPluginsInfo();
    fullDump += '\n';

    fullDump += '================================\n'
    fullDump += '= Flatpak remote configuration =\n'
    fullDump += '================================\n'
    fullDump += '\n';
    fullDump += trySpawn('flatpak remote-list --show-details');
    fullDump += '\n';

    fullDump += '==============================\n'
    fullDump += '= Flatpak installed runtimes =\n'
    fullDump += '==============================\n'
    fullDump += '\n';
    fullDump += trySpawn('flatpak list --runtime --show-details');
    fullDump += '\n';

    fullDump += '==================================\n'
    fullDump += '= Flatpak installed applications =\n'
    fullDump += '==================================\n'
    fullDump += '\n';
    fullDump += trySpawn('flatpak list --app --show-details');
    fullDump += '\n';

    fullDump += '================\n'
    fullDump += '= Process list =\n'
    fullDump += '================\n'
    fullDump += '\n';
    fullDump += trySpawn('ps aux');
    fullDump += '\n';

    fullDump += '===============\n'
    fullDump += '= Boot timing =\n'
    fullDump += '===============\n'
    fullDump += '\n';
    fullDump += trySpawn('systemd-analyze');
    fullDump += '\n';

    fullDump += '==================\n';
    fullDump += '= Journal output =\n';
    fullDump += '==================\n';
    fullDump += '\n';
    fullDump += trySpawn('journalctl --no-pager');

    if (filename == 'stdout') {
        print(fullDump);
    } else {
        try {
            GLib.file_set_contents(filename, fullDump);
            log('Saved to ' + filename);
        } catch (e) {
            log('Can\'t save diagnostic file to ' + filename + ': ' + e.message);
        }
    }
}

let fileArg = ARGV[0];
let filename;

if (fileArg) {
    filename = fileArg;
} else {
    let date = GLib.DateTime.new_now_local();
    let basename = 'eos-diagnostic-' + date.format('%y%m%d_%H%M%S_UTC%z') + '.txt';
    filename = GLib.build_filenamev([GLib.get_home_dir(), basename]);
}

dumpDiagnostics(filename);
